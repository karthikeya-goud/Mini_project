import pandas as pd
import random
from datetime import datetime, timedelta

# --- Define Locations with Latitude and Longitude ---
locations = [
    {'Node_ID': 1, 'Name': 'Place 1', 'Latitude': 40.712776, 'Longitude': -74.005974},
    {'Node_ID': 2, 'Name': 'Place 2', 'Latitude': 40.730610, 'Longitude': -73.935242},
    {'Node_ID': 3, 'Name': 'Place 3', 'Latitude': 40.748817, 'Longitude': -73.985428},
    {'Node_ID': 4, 'Name': 'Place 4', 'Latitude': 40.764351, 'Longitude': -73.973604},
    {'Node_ID': 5, 'Name': 'Place 5', 'Latitude': 40.679356, 'Longitude': -73.974535},
    {'Node_ID': 6, 'Name': 'Place 6', 'Latitude': 40.678178, 'Longitude': -73.944158},
    {'Node_ID': 7, 'Name': 'Place 7', 'Latitude': 40.748441, 'Longitude': -73.987844},
    {'Node_ID': 8, 'Name': 'Place 8', 'Latitude': 40.748817, 'Longitude': -73.985428},
    {'Node_ID': 9, 'Name': 'Place 9', 'Latitude': 40.761149, 'Longitude': -73.977832},
    {'Node_ID': 10, 'Name': 'Place 10', 'Latitude': 40.717840, 'Longitude': -74.013356},
    {'Node_ID': 11, 'Name': 'Place 11', 'Latitude': 40.765200, 'Longitude': -73.983500},
    {'Node_ID': 12, 'Name': 'Place 12', 'Latitude': 40.752577, 'Longitude': -73.987899}
]

# --- Function to Generate Traffic and Ad Data for n Days ---
def generate_data_for_n_days(n=1):
    traffic_levels = ['Low', 'Medium', 'High']
    ad_types = ['Video', 'Banner', 'Interactive']
    start_time = datetime(2025, 3, 21, 9, 0)  # 9 AM on the first day
    end_time = datetime(2025, 3, 21, 19, 0)  # 7 PM on the first day
    time_interval = timedelta(minutes=30)  # 30-minute intervals
    
    all_data = []
    
    # Generate data for n days
    for day in range(n):
        current_time = start_time + timedelta(days=day)
        while current_time <= end_time + timedelta(days=day):
            for location in locations:
                # Randomly generate people count between 50 and 200
                people_count = random.randint(50, 200)
                # Randomly choose a traffic condition
                traffic_condition = random.choice(traffic_levels)
                # Randomly choose an ad type
                ad_type = random.choice(ad_types)
                # Randomly generate clicks and impressions
                clicks = random.randint(5, 50)
                impressions = random.randint(100, 500)
                # Calculate engagement rate
                engagement_rate = (clicks / impressions) * 100 if impressions != 0 else 0
                all_data.append({
                    'Timestamp': current_time,
                    'Node_ID': location['Node_ID'],
                    'Name': location['Name'],
                    'Latitude': location['Latitude'],
                    'Longitude': location['Longitude'],
                    'People_Count': people_count,
                    'Traffic_Condition': traffic_condition,
                    'Ad_Type': ad_type,
                    'Clicks': clicks,
                    'Impressions': impressions,
                    'Engagement_Rate': engagement_rate
                })
            current_time += time_interval
    
    return pd.DataFrame(all_data)

# --- Generate data for n days (e.g., 5 days) ---
n_days = 5  # Set the number of days you want the data for
df = generate_data_for_n_days(n_days)

# --- Save to CSV (Optional) ---
df.to_csv('generated_node_data.csv', index=False)

# Display first few rows of the dataset
print(df.head())

# --- Additional Analysis or Visualization ---
import matplotlib.pyplot as plt

# 1. Show Total Clicks by Traffic Condition
clicks_by_traffic = df.groupby('Traffic_Condition')['Clicks'].sum()

# Plot the data
clicks_by_traffic.plot(kind='bar', color='skyblue', title='Total Clicks by Traffic Condition')
plt.xlabel('Traffic Condition')
plt.ylabel('Total Clicks')
plt.show()

# 2. Show Average Engagement Rate by Ad Type
engagement_by_ad_type = df.groupby('Ad_Type')['Engagement_Rate'].mean()

# Plot the data
engagement_by_ad_type.plot(kind='bar', color='orange', title='Average Engagement Rate by Ad Type')
plt.xlabel('Ad Type')
plt.ylabel('Average Engagement Rate (%)')
plt.show()

# 3. Show Total Impressions by Node
impressions_by_node = df.groupby('Node_ID')['Impressions'].sum()

# Plot the data
impressions_by_node.plot(kind='bar', color='green', title='Total Impressions by Node')
plt.xlabel('Node ID')
plt.ylabel('Total Impressions')
plt.show()

# 4. Time-based Analysis of People Count
people_count_by_time = df.groupby('Timestamp')['People_Count'].sum()

# Plot the data
people_count_by_time.plot(kind='line', title='Total People Count Over Time')
plt.xlabel('Time')
plt.ylabel('Total People Count')
plt.show()

# --- Example for Route Optimization (using simple greedy approach) ---
# Define a simple greedy approach to select a route based on distance and ad visibility (clicks)

def greedy_route_optimization(start_node, destination_node, distance_matrix, ad_visibility_matrix):
    route = [start_node]
    current_node = start_node
    
    while current_node != destination_node:
        next_node = None
        max_visibility = 0
        
        for i in range(len(distance_matrix)):
            if i not in route and distance_matrix[current_node][i] < float('inf'):
                visibility = ad_visibility_matrix[current_node][i]
                if visibility > max_visibility:
                    max_visibility = visibility
                    next_node = i
        route.append(next_node)
        current_node = next_node
    
    return route

# Example distance matrix (from the 12 locations)
distance_matrix = [
    # Sample distance matrix (replace with your actual data)
    [0, 2, 4, 6, 8, 5, 7, 3, 2, 4, 6, 7],
    [2, 0, 3, 5, 7, 6, 8, 4, 5, 3, 7, 6],
    [4, 3, 0, 2, 4, 3, 5, 2, 3, 5, 6, 4],
    [6, 5, 2, 0, 3, 4, 6, 3, 4, 6, 5, 3],
    [8, 7, 4, 3, 0, 5, 7, 4, 5, 8, 6, 5],
    [5, 6, 3, 4, 5, 0, 2, 1, 3, 4, 7, 6],
    [7, 8, 5, 6, 7, 2, 0, 2, 5, 6, 7, 8],
    [3, 4, 2, 3, 4, 1, 2, 0, 2, 4, 5, 6],
    [2, 5, 3, 4, 5, 3, 5, 2, 0, 3, 6, 7],
    [4, 3, 5, 6, 8, 4, 6, 4, 3, 0, 7, 6],
    [6, 7, 6, 5, 6, 7, 7, 5, 6, 7, 0, 3],
    [7, 6, 4, 3, 5, 6, 8, 6, 7, 6, 3, 0]
]

# Example ad visibility matrix (click counts or impressions between locations)
ad_visibility_matrix = [
    # Sample ad visibility matrix (replace with your actual data)
    [0, 50, 70, 60, 80, 55, 40, 90, 85, 60, 45, 70],
    [50, 0, 80, 40, 90, 60, 75, 80, 60, 50, 55, 65],
    [70, 80, 0, 50, 85, 65, 75, 95, 80, 60, 50, 65],
    [60, 40, 50, 0, 65, 60, 80, 75, 70, 60, 55, 85],
    [80, 90, 85, 65, 0, 70, 75, 65, 80, 75, 60, 50],
    [55, 60, 65, 60, 70, 0, 60, 75, 55, 70, 80, 60],
    [40, 75, 75, 80, 75, 60, 0, 80, 65, 70, 90, 50],
    [90, 80, 95, 75, 65, 75, 80, 0, 60, 65, 80, 85],
    [85, 60, 80, 70, 80, 55, 65, 60, 0, 80, 75, 65],
    [60, 50, 60, 60, 75, 70, 70, 65, 80, 0, 90, 60],
    [45, 55, 50, 55, 60, 80, 90, 80, 75, 90, 0, 40],
    [70, 65, 65, 85, 50, 60, 50, 85, 65, 60, 40, 0]
]

# Example start and destination nodes
start_node = 0  # Node 1 (index 0)
destination_node = 11  # Node 12 (index 11)

# Find the best route based on greedy approach
route = greedy_route_optimization(start_node, destination_node, distance_matrix, ad_visibility_matrix)
print(f"The best route based on ad visibility is: {route}")
